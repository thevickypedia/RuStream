name: Build, test, upload artifact and release crate

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  winterfell:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      upload_url: ${{ steps.create-release.outputs.upload_url }}
    steps:
      - name: Bump version and push tag
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.1
        with:
          github_token: ${{ secrets.GIT_TOKEN }}
      - name: Create a GitHub release
        id: create-release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.tag_version.outputs.new_tag }}
          name: Release ${{ steps.tag_version.outputs.new_tag }}
          body: ${{ steps.tag_version.outputs.changelog }}
          prerelease: ${{ github.ref != 'refs/heads/main' &&  'true' || 'false' }}
  #      - name: Release Crate
  #        run: |
  #          cargo login ${{ secrets.CRATES_TOKEN }}
  #          cargo publish --allow-dirty  # Set allow-dirty since building will create a /target folder that will be uncommitted in git
  #        shell: bash

  valyria:
    needs: winterfell
    strategy:
      matrix:
        platform:
          - release_for: Linux-x86_64
            os: ubuntu-20.04
            target: x86_64-unknown-linux-gnu
            bin: stream
            name: RuStream-Linux-x86_64.tar.gz
            command: build

          - release_for: Windows-x86_64
            os: windows-latest
            target: x86_64-pc-windows-msvc
            bin: stream.exe
            name: RuStream-Windows-x86_64.zip
            command: build

          - release_for: macOS-x86_64
            os: macOS-latest
            target: x86_64-apple-darwin
            bin: stream
            name: RuStream-Darwin-x86_64.tar.gz
            command: build

          - release_for: RaspberryPi
            os: ubuntu-20.04
            target: arm-unknown-linux-gnueabihf
            bin: stream
            name: RuStream-RaspberryPi.tar.gz
            command: build

    name: Upload asset for ${{ matrix.platform.release_for }}
    runs-on: ${{ matrix.platform.os }}

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.9

      - name: Install OpenSSL static for Windows
        # https://github.com/sfackler/rust-openssl/issues/1086
        if: ${{ matrix.platform.os == 'windows-latest' }}
        run: |
          mkdir \Tools
          cd \Tools
          git clone https://github.com/Microsoft/vcpkg.git
          cd vcpkg
          .\bootstrap-vcpkg.bat
          .\vcpkg.exe install openssl:x64-windows-static

          $env:OPENSSL_DIR = 'C:\Tools\vcpkg\installed\x64-windows-static'
          $env:OPENSSL_STATIC = 'Yes'
          [System.Environment]::SetEnvironmentVariable('OPENSSL_DIR', $env:OPENSSL_DIR, [System.EnvironmentVariableTarget]::User)
          [System.Environment]::SetEnvironmentVariable('OPENSSL_STATIC', $env:OPENSSL_STATIC, [System.EnvironmentVariableTarget]::User)

      - name: Build
        run: |
          cargo build --release
        shell: bash

      - name: Run tests
        run: |
          cargo test
        shell: bash

      - name: Debug
        run: |
          pwd
          ls -ltrh
          ls -LR

      - name: Copy artifacts to folder and compress non windows
        if: ${{ matrix.platform.os != 'windows-latest' }}
        run: |
          mkdir -p rustream
          cp target/release/${{ matrix.platform.bin }} rustream/${{ matrix.platform.bin }}
          tar -zcvf ${{ matrix.platform.name }} rustream/

      - name: Copy artifacts to folder and compress Windows
        if: ${{ matrix.platform.os == 'windows-latest' }}
        run: |
          mkdir -p rustream
          cp target/release/${{ matrix.platform.bin }} rustream/${{ matrix.platform.bin }}
          Compress-Archive -DestinationPath  ${{ matrix.platform.name }} -Path rustream/

      - name: upload asset
        uses: shogo82148/actions-upload-release-asset@v1
        with:
          upload_url: ${{ needs.winterfell.outputs.upload_url }}
          asset_path: ${{ matrix.platform.name }}
